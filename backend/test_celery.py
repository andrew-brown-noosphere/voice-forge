#!/usr/bin/env python3\n\"\"\"\nCelery Test Script for VoiceForge\nThis script tests if Celery is properly configured and working.\n\"\"\"\n\nimport os\nimport sys\nfrom pathlib import Path\n\n# Add the backend directory to Python path\nbackend_dir = Path(__file__).parent\nsys.path.append(str(backend_dir))\n\nprint(\"🧪 VoiceForge Celery Test Script\")\nprint(\"=\" * 40)\nprint()\n\n# Test 1: Environment variables\nprint(\"1. 🔍 Checking environment variables...\")\nredis_url = os.getenv('REDIS_URL')\nif redis_url:\n    print(f\"   ✅ REDIS_URL: {redis_url}\")\nelse:\n    print(\"   ❌ REDIS_URL not set\")\n\nbroker_url = os.getenv('CELERY_BROKER_URL')\nif broker_url:\n    print(f\"   ✅ CELERY_BROKER_URL: {broker_url}\")\nelse:\n    print(\"   ❌ CELERY_BROKER_URL not set\")\n\nprint()\n\n# Test 2: Redis connection\nprint(\"2. 🔴 Testing Redis connection...\")\ntry:\n    import redis\n    r = redis.Redis.from_url(redis_url or 'redis://localhost:6379/0')\n    response = r.ping()\n    if response:\n        print(\"   ✅ Redis connection successful\")\n    else:\n        print(\"   ❌ Redis ping failed\")\nexcept ImportError:\n    print(\"   ❌ Redis package not installed\")\n    print(\"   📋 Install with: pip install redis\")\nexcept Exception as e:\n    print(f\"   ❌ Redis connection failed: {e}\")\n    print(\"   💡 Make sure Redis is running: redis-server\")\n\nprint()\n\n# Test 3: Celery import\nprint(\"3. 📦 Testing Celery imports...\")\ntry:\n    import celery\n    print(f\"   ✅ Celery version: {celery.__version__}\")\nexcept ImportError:\n    print(\"   ❌ Celery not installed\")\n    print(\"   📋 Install with: pip install celery\")\n    sys.exit(1)\n\nprint()\n\n# Test 4: Celery app import\nprint(\"4. 🍃 Testing Celery app configuration...\")\ntry:\n    from celery_app import celery_app\n    print(\"   ✅ Celery app imported successfully\")\n    print(f\"   📋 Broker: {celery_app.conf.broker_url}\")\n    print(f\"   📋 Backend: {celery_app.conf.result_backend}\")\nexcept ImportError as e:\n    print(f\"   ❌ Failed to import celery_app: {e}\")\n    sys.exit(1)\nexcept Exception as e:\n    print(f\"   ❌ Celery app configuration error: {e}\")\n    sys.exit(1)\n\nprint()\n\n# Test 5: Task imports\nprint(\"5. 🎯 Testing task imports...\")\ntry:\n    from crawler.tasks import health_check_task\n    print(\"   ✅ health_check_task imported\")\nexcept ImportError as e:\n    print(f\"   ⚠️  health_check_task import failed: {e}\")\n    print(\"   💡 This might be normal if tasks module doesn't exist\")\n\ntry:\n    from crawler.tasks import crawl_website_task\n    print(\"   ✅ crawl_website_task imported\")\nexcept ImportError as e:\n    print(f\"   ⚠️  crawl_website_task import failed: {e}\")\n\nprint()\n\n# Test 6: Check registered tasks\nprint(\"6. 📋 Checking registered tasks...\")\ntry:\n    registered_tasks = list(celery_app.tasks.keys())\n    if registered_tasks:\n        print(f\"   ✅ Found {len(registered_tasks)} registered tasks:\")\n        for task in registered_tasks[:5]:  # Show first 5\n            print(f\"      - {task}\")\n        if len(registered_tasks) > 5:\n            print(f\"      ... and {len(registered_tasks) - 5} more\")\n    else:\n        print(\"   ⚠️  No tasks registered (this might be normal)\")\nexcept Exception as e:\n    print(f\"   ❌ Error checking tasks: {e}\")\n\nprint()\n\n# Test 7: Test task execution (only if worker is running)\nprint(\"7. 🚀 Testing task execution...\")\ntry:\n    # Try to run a simple test\n    from celery_app import celery_app\n    \n    # Create a simple test task\n    @celery_app.task\n    def test_task():\n        return \"Hello from Celery!\"\n    \n    # Try to send the task\n    result = test_task.delay()\n    print(f\"   ✅ Task submitted successfully: {result.id}\")\n    print(\"   💡 Task will only execute if a worker is running\")\n    \n    # Try to get result with short timeout\n    try:\n        task_result = result.get(timeout=5)\n        print(f\"   🎉 Task completed: {task_result}\")\n    except Exception as e:\n        print(f\"   ⏳ Task queued but no worker available: {type(e).__name__}\")\n        print(\"   💡 Start a worker with: celery -A celery_app worker --loglevel=info\")\n        \nexcept Exception as e:\n    print(f\"   ❌ Task execution test failed: {e}\")\n\nprint()\nprint(\"🎯 Test Summary:\")\nprint(\"=\" * 40)\nprint(\"If you see mostly ✅ marks above, Celery is properly configured!\")\nprint()\nprint(\"📋 Next steps if needed:\")\nprint(\"1. Install Redis: brew install redis (macOS) or sudo apt install redis-server (Ubuntu)\")\nprint(\"2. Start Redis: redis-server\")\nprint(\"3. Start Celery worker: celery -A celery_app worker --loglevel=info\")\nprint(\"4. Start your API: uvicorn api.main:app --reload\")\nprint()\nprint(\"🌸 Optional: Start Flower monitoring: celery -A celery_app flower\")\nprint(\"   Then visit: http://localhost:5555\")\n