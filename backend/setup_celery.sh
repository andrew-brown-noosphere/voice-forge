#!/bin/bash\n\n# VoiceForge Celery Setup Script\n# This script sets up and starts all services needed for distributed task processing\n\necho \"üöÄ VoiceForge Celery Setup & Start Script\"\necho \"=========================================\"\necho\n\n# Color codes for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Get the directory of this script\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\necho \"üìÇ Working directory: $SCRIPT_DIR\"\n\n# Check if Redis is installed\necho -e \"${BLUE}üîç Checking Redis installation...${NC}\"\nif ! command -v redis-server &> /dev/null; then\n    echo -e \"${RED}‚ùå Redis is not installed${NC}\"\n    echo -e \"${YELLOW}üìã To install Redis:${NC}\"\n    echo \"   macOS: brew install redis\"\n    echo \"   Ubuntu: sudo apt install redis-server\"\n    echo \"   Docker: docker run -d -p 6379:6379 redis:alpine\"\n    exit 1\nelse\n    echo -e \"${GREEN}‚úÖ Redis is installed${NC}\"\nfi\n\n# Check if Redis is running\necho -e \"${BLUE}üîç Checking Redis connection...${NC}\"\nif redis-cli ping &> /dev/null; then\n    echo -e \"${GREEN}‚úÖ Redis is running${NC}\"\nelse\n    echo -e \"${YELLOW}‚ö†Ô∏è  Redis is not running, starting it...${NC}\"\n    # Try to start Redis in the background\n    if command -v brew &> /dev/null; then\n        # macOS with Homebrew\n        brew services start redis\n    else\n        # Start Redis server in background\n        redis-server --daemonize yes\n    fi\n    \n    # Wait a moment and check again\n    sleep 2\n    if redis-cli ping &> /dev/null; then\n        echo -e \"${GREEN}‚úÖ Redis started successfully${NC}\"\n    else\n        echo -e \"${RED}‚ùå Failed to start Redis${NC}\"\n        exit 1\n    fi\nfi\n\n# Check Python virtual environment\necho -e \"${BLUE}üîç Checking Python environment...${NC}\"\nif [ -d \"$SCRIPT_DIR/venv\" ]; then\n    VENV_PATH=\"$SCRIPT_DIR/venv\"\n    echo -e \"${GREEN}‚úÖ Found venv at $VENV_PATH${NC}\"\nelif [ -d \"$SCRIPT_DIR/venv-py311\" ]; then\n    VENV_PATH=\"$SCRIPT_DIR/venv-py311\"\n    echo -e \"${GREEN}‚úÖ Found venv-py311 at $VENV_PATH${NC}\"\nelse\n    echo -e \"${RED}‚ùå No virtual environment found${NC}\"\n    echo -e \"${YELLOW}üìã Create one with: python -m venv venv${NC}\"\n    exit 1\nfi\n\n# Activate virtual environment\nsource \"$VENV_PATH/bin/activate\"\necho -e \"${GREEN}‚úÖ Activated virtual environment${NC}\"\n\n# Check if required packages are installed\necho -e \"${BLUE}üîç Checking required packages...${NC}\"\nif ! python -c \"import celery, redis\" &> /dev/null; then\n    echo -e \"${YELLOW}‚ö†Ô∏è  Installing required packages...${NC}\"\n    pip install celery redis flower\nfi\n\n# Check if celery app can be imported\necho -e \"${BLUE}üîç Testing Celery configuration...${NC}\"\nif python -c \"from celery_app import celery_app; print('Celery app loaded successfully')\" &> /dev/null; then\n    echo -e \"${GREEN}‚úÖ Celery configuration is valid${NC}\"\nelse\n    echo -e \"${RED}‚ùå Celery configuration error${NC}\"\n    echo \"Testing import...\"\n    python -c \"from celery_app import celery_app; print('OK')\"\n    exit 1\nfi\n\n# Create logs directory\nmkdir -p logs\n\necho\necho -e \"${GREEN}üéâ All checks passed! Starting services...${NC}\"\necho\n\n# Function to handle cleanup on exit\ncleanup() {\n    echo\n    echo -e \"${YELLOW}üõë Shutting down services...${NC}\"\n    \n    # Kill background processes\n    if [ ! -z \"$WORKER_PID\" ]; then\n        kill $WORKER_PID 2>/dev/null\n        echo \"Stopped Celery worker\"\n    fi\n    \n    if [ ! -z \"$FLOWER_PID\" ]; then\n        kill $FLOWER_PID 2>/dev/null\n        echo \"Stopped Flower\"\n    fi\n    \n    echo -e \"${GREEN}‚úÖ Cleanup complete${NC}\"\n    exit 0\n}\n\n# Set up signal handlers\ntrap cleanup SIGINT SIGTERM\n\n# Start Celery worker in background\necho -e \"${BLUE}üë∑ Starting Celery worker...${NC}\"\ncelery -A celery_app worker --loglevel=info --queues=crawl,process,rag --logfile=logs/worker.log --detach --pidfile=logs/worker.pid\nWORKER_PID=$(cat logs/worker.pid 2>/dev/null)\necho -e \"${GREEN}‚úÖ Celery worker started (PID: $WORKER_PID)${NC}\"\n\n# Start Flower monitoring in background\necho -e \"${BLUE}üå∏ Starting Flower monitoring...${NC}\"\ncelery -A celery_app flower --port=5555 --logfile=logs/flower.log --detach --pidfile=logs/flower.pid\nFLOWER_PID=$(cat logs/flower.pid 2>/dev/null)\necho -e \"${GREEN}‚úÖ Flower started (PID: $FLOWER_PID)${NC}\"\necho -e \"${BLUE}üåê Flower dashboard: http://localhost:5555${NC}\"\n\n# Wait a moment for services to start\nsleep 3\n\n# Test that everything is working\necho -e \"${BLUE}üß™ Testing Celery setup...${NC}\"\nif python -c \"\nfrom celery_app import celery_app\nfrom crawler.tasks import health_check_task\nresult = health_check_task.delay()\nprint(f'‚úÖ Test task submitted: {result.id}')\n\" 2>/dev/null; then\n    echo -e \"${GREEN}‚úÖ Celery is working correctly!${NC}\"\nelse\n    echo -e \"${YELLOW}‚ö†Ô∏è  Celery test failed, but services are running${NC}\"\nfi\n\necho\necho -e \"${GREEN}üéâ VoiceForge Celery Setup Complete!${NC}\"\necho \"=========================================\"\necho -e \"${BLUE}üìä Service Status:${NC}\"\necho \"   Redis: ‚úÖ Running\"\necho \"   Celery Worker: ‚úÖ Running (PID: $WORKER_PID)\"\necho \"   Flower Monitor: ‚úÖ Running (PID: $FLOWER_PID)\"\necho\necho -e \"${BLUE}üåê Access Points:${NC}\"\necho \"   Flower Dashboard: http://localhost:5555\"\necho \"   API Server: Start with 'uvicorn api.main:app --reload'\"\necho\necho -e \"${BLUE}üìã Management Commands:${NC}\"\necho \"   Check workers: celery -A celery_app inspect active\"\necho \"   Stop workers: celery -A celery_app control shutdown\"\necho \"   View logs: tail -f logs/worker.log\"\necho\necho -e \"${YELLOW}Press Ctrl+C to stop all services${NC}\"\necho\n\n# Keep script running to monitor services\nwhile true; do\n    sleep 10\n    \n    # Check if worker is still running\n    if [ ! -z \"$WORKER_PID\" ] && ! kill -0 $WORKER_PID 2>/dev/null; then\n        echo -e \"${RED}‚ùå Celery worker stopped unexpectedly${NC}\"\n        break\n    fi\n    \n    # Check if flower is still running\n    if [ ! -z \"$FLOWER_PID\" ] && ! kill -0 $FLOWER_PID 2>/dev/null; then\n        echo -e \"${RED}‚ùå Flower stopped unexpectedly${NC}\"\n        break\n    fi\ndone\n\n# Cleanup on exit\ncleanup"